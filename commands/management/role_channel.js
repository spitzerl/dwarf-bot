const {
	SlashCommandBuilder,
	PermissionsBitField,
	ChannelType,
	ActionRowBuilder,
	StringSelectMenuBuilder,
} = require('discord.js');
const { getChannelsData, setChannelsData } = require('../../utils/utils');
const { toKebabCase } = require('../../utils/stringFormatter');

module.exports = {
	category: 'management',
	data: new SlashCommandBuilder()
		.setName('role_channel')
		.setDescription('Gestion des channels de s√©lection de r√¥les de jeux')
		.addSubcommand(subcommand =>
			subcommand
				.setName('create')
				.setDescription('Cr√©e un channel et y publie une liste d√©roulante pour choisir les r√¥les de jeux')
				.addStringOption(option =>
					option
						.setName('name')
						.setDescription('Nom du channel √† cr√©er')
						.setRequired(true),
				),
		)
		.addSubcommand(subcommand =>
			subcommand
				.setName('delete')
				.setDescription('Supprime un channel de s√©lection de r√¥les')
				.addChannelOption(option =>
					option
						.setName('channel')
						.setDescription('Le channel √† supprimer (optionnel, utilisera le channel de r√¥le existant si non sp√©cifi√©)')
						.setRequired(false)
						.addChannelTypes(ChannelType.GuildText),
				),
		)
		.addSubcommand(subcommand =>
			subcommand
				.setName('update')
				.setDescription('Force la mise √† jour de la liste des jeux dans le channel de s√©lection de r√¥les'),
		),

	async execute(interaction) {
		// V√©rifications d'autorisation (admin / manage channels)
		if (!interaction.memberPermissions.has(PermissionsBitField.Flags.ManageChannels)) {
			return interaction.reply({
				content: 'Vous n\'avez pas la permission de g√©rer les channels.',
				ephemeral: true,
			});
		}

		const subcommand = interaction.options.getSubcommand();
		const guild = interaction.guild;
		const channelsData = getChannelsData();

		// COMMANDE CREATE - Cr√©ation d'un nouveau channel de s√©lection
		if (subcommand === 'create') {
			const name = interaction.options.getString('name');

			// V√©rifier si un channel avec le m√™me nom simplifi√© existe d√©j√†
			const nameSimplified = toKebabCase(name);
			for (const c of Object.values(channelsData)) {
				if (c.nameSimplified === nameSimplified) {
					return interaction.reply({
						content: 'Un channel avec ce nom existe d√©j√† (r√©f√©renc√© dans channels.json).',
						ephemeral: true,
					});
				}
			}

			// V√©rifier si le salon existe d√©j√† sur le serveur
			const existing = guild.channels.cache.find((ch) => ch.name === name || ch.name === `#${name}` || ch.name === name);
			if (existing) {
				return interaction.reply({
					content: 'Un channel portant ce nom existe d√©j√† sur le serveur.',
					ephemeral: true,
				});
			}

			try {
				// Cr√©ation du channel textuel
				const channel = await guild.channels.create({
					name: name,
					type: ChannelType.GuildText,
				});

				// Publier le menu de s√©lection
				await publishSelectionMenu(channel, channelsData);

				// Ajouter au channels.json avec le type 'role_selection'
				const data = {
					name: name,
					nameSimplified: nameSimplified,
					idChannel: channel.id,
					idRole: null,
					selectChannel: true,
					type: 'role_selection', // Type sp√©cifique pour les channels de s√©lection de r√¥les
					emoji: 'üìã', // Emoji par d√©faut pour les channels de s√©lection
				};

				channelsData[channel.id] = data;
				setChannelsData(channelsData);

				return interaction.reply({ content: `Channel cr√©√© : <#${channel.id}> et menu post√©.` });
			}
			catch (error) {
				console.error('Erreur lors de la cr√©ation du channel:', error);
				return interaction.reply({
					content: 'Erreur lors de la cr√©ation du channel.',
					ephemeral: true,
				});
			}
		}
		// COMMANDE DELETE - Suppression d'un channel de s√©lection
		else if (subcommand === 'delete') {
			let channel = interaction.options.getChannel('channel');
			let channelData = null;

			// Si aucun channel n'est sp√©cifi√©, chercher le channel de type role_selection
			if (!channel) {
				// Trouver le premier channel de type role_selection
				const roleSelectionChannel = Object.values(channelsData).find(
					entry => entry.type === 'role_selection' || entry.selectChannel === true,
				);

				if (!roleSelectionChannel) {
					return interaction.reply({
						content: 'Aucun channel de s√©lection de r√¥les trouv√©. Veuillez sp√©cifier un channel existant.',
						ephemeral: true,
					});
				}

				// R√©cup√©rer le channel Discord √† partir de son ID
				channel = await interaction.guild.channels.fetch(roleSelectionChannel.idChannel).catch(() => null);
				if (!channel) {
					// Si le channel n'existe plus sur le serveur, on supprime quand m√™me l'entr√©e du JSON
					delete channelsData[roleSelectionChannel.idChannel];
					setChannelsData(channelsData);

					return interaction.reply({
						content: 'Le channel de s√©lection de r√¥les n\'existe plus sur le serveur. L\'entr√©e a √©t√© supprim√©e.',
						ephemeral: true,
					});
				}

				channelData = roleSelectionChannel;
			}
			else {
				// V√©rifier si ce channel est bien un channel de s√©lection
				channelData = channelsData[channel.id];
				if (!channelData || (!channelData.selectChannel && channelData.type !== 'role_selection')) {
					return interaction.reply({
						content: 'Ce channel n\'est pas un channel de s√©lection de r√¥les enregistr√©.',
						ephemeral: true,
					});
				}
			}

			try {
				// Supprimer le channel Discord
				await channel.delete('Suppression par commande /role_channel delete');

				// Supprimer l'entr√©e du JSON
				delete channelsData[channel.id];
				setChannelsData(channelsData);

				return interaction.reply({
					content: `Le channel de s√©lection ${channel.name} a √©t√© supprim√© avec succ√®s.`,
					ephemeral: true,
				});
			}
			catch (error) {
				console.error('Erreur lors de la suppression du channel:', error);
				return interaction.reply({
					content: 'Une erreur est survenue lors de la suppression du channel.',
					ephemeral: true,
				});
			}
		}
		// COMMANDE UPDATE - Mise √† jour forc√©e d'un channel de s√©lection
		else if (subcommand === 'update') {
			let channel = null;
			let channelData = null;

			// Trouver le premier channel de type role_selection
			const roleSelectionChannel = Object.values(channelsData).find(
				entry => entry.type === 'role_selection' || entry.selectChannel === true,
			);

			if (!roleSelectionChannel) {
				return interaction.reply({
					content: 'Aucun channel de s√©lection de r√¥les trouv√©. Veuillez d\'abord en cr√©er un avec /role_channel create.',
					ephemeral: true,
				});
			}

			// R√©cup√©rer le channel Discord √† partir de son ID
			channel = await interaction.guild.channels.fetch(roleSelectionChannel.idChannel).catch(() => null);
			if (!channel) {
				return interaction.reply({
					content: 'Le channel de s√©lection de r√¥les r√©f√©renc√© dans les donn√©es n\'existe plus sur le serveur.',
					ephemeral: true,
				});
			}

			// eslint-disable-next-line no-unused-vars
			channelData = roleSelectionChannel;

			try {
				// Supprimer les anciens messages
				await interaction.reply({
					content: `Mise √† jour du channel <#${channel.id}> en cours...`,
					ephemeral: true,
				});

				// R√©cup√©rer les anciens messages
				const messages = await channel.messages.fetch({ limit: 10 });

				// Supprimer tous les messages r√©cup√©r√©s
				for (const message of messages.values()) {
					await message.delete().catch(error => {
						console.error(`Erreur lors de la suppression d'un message: ${error}`);
					});
				}

				// Publier le nouveau menu de s√©lection
				await publishSelectionMenu(channel, channelsData);

				return interaction.editReply({
					content: `Le menu de s√©lection dans <#${channel.id}> a √©t√© mis √† jour avec succ√®s.`,
				});
			}
			catch (error) {
				console.error('Erreur lors de la mise √† jour du channel:', error);
				return interaction.editReply({
					content: 'Une erreur est survenue lors de la mise √† jour du channel.',
				});
			}
		}
	},
};

/**
};

/**
 * G√©n√®re les options pour le menu de s√©lection de r√¥les
 * @param {Object} channelsData - Les donn√©es des channels
 * @returns {Array<Object>} - Les options pour le menu de s√©lection
 */
function generateRoleOptions(channelsData) {
	// Pr√©parer les options de la liste d√©roulante depuis channels.json
	const options = [];
	for (const entry of Object.values(channelsData)) {
		// Ignorer l'entr√©e s'il s'agit d'un channel de s√©lection
		if (entry.selectChannel === true || entry.type === 'role_selection') continue;

		// Utiliser le nom et emoji stock√©s dans le JSON
		const label = entry.name || entry.nameSimplified || 'Inconnu';

		// Pr√©parer l'option pour le select menu
		const opt = {
			label: label.slice(0, 25), // Limiter √† 25 caract√®res le label
			value: (entry.nameSimplified || label).slice(0, 100),
		};

		// Ajouter l'emoji s'il existe dans le JSON ou essayer de l'extraire du nom si c'est une ancienne entr√©e
		if (entry.emoji) {
			// Utiliser l'emoji stock√© dans le JSON
			opt.emoji = entry.emoji;
		}
		else {
			// R√©trocompatibilit√©: essayer d'extraire l'emoji du nom si c'est une ancienne entr√©e
			const match = /^(.+)„Éª(.+)$/.exec(label);
			if (match && match[1].length <= 3) {
				opt.emoji = match[1];
			}
		}

		// Pas de description pour simplifier et r√©duire les erreurs
		options.push(opt);
	}

	return options;
}

/**
 * Cr√©e un composant de menu de s√©lection pour les r√¥les
 * @param {Array<Object>} options - Les options pour le menu
 * @returns {ActionRowBuilder} - Le composant de menu pr√™t √† √™tre utilis√©
 */
function createRoleSelectionMenu(options) {
	// S'assurer qu'il y a au moins une option
	const validOptions = options.length > 0 ? options : [{
		label: 'Aucun jeu disponible',
		value: 'no-games',
	}];

	// Discord limite le nombre d'options √† 25
	const limitedOptions = validOptions.slice(0, 25);

	// Cr√©er le menu
	const selectMenu = new StringSelectMenuBuilder()
		.setCustomId('select_game_roles')
		.setPlaceholder('Choisissez un ou plusieurs jeux')
		.setMinValues(1)
		.setMaxValues(limitedOptions.length) // Pas de limite sur le nombre de r√¥les
		.addOptions(limitedOptions);

	return new ActionRowBuilder().addComponents(selectMenu);
}

// Exporter la fonction pour qu'elle soit utilisable par d'autres modules
/**
 * @param {Discord.TextChannel} channel - Le channel o√π publier le menu
 * @param {Object} channelsData - Les donn√©es des channels
 * @returns {Promise<void>}
 */
async function publishSelectionMenu(channel, channelsData) {
	// G√©n√©rer les options du menu
	const options = generateRoleOptions(channelsData);

	// Cr√©er d'abord un message avec l'embed explicatif
	const embed = {
		title: 'S√©lection des r√¥les de jeux',
		description:
			'Choisissez dans la liste ci-dessous les jeux auxquels vous souhaitez √™tre associ√©.\n\n' +
			'Validez pour appliquer. Pour retirer un r√¥le, rouvrez le menu et d√©s√©lectionnez-le.',
		color: 0x00ff00,
	};

	await channel.send({ embeds: [embed] });

	// V√©rifier qu'il y a au moins une option valide
	if (options.length === 0) {
		// Message d'information si aucun jeu disponible
		await channel.send('Aucun jeu n\'a √©t√© trouv√© dans la configuration. Veuillez ajouter des jeux via la commande /create.');
	}

	try {
		// Cr√©er le menu de s√©lection avec nos options
		const row = createRoleSelectionMenu(options);

		// Envoyer le message avec uniquement le composant
		await channel.send({ content: 'Liste des jeux disponibles :', components: [row] });
	}
	catch (menuError) {
		console.error('Erreur lors de la cr√©ation du menu:', menuError);
		await channel.send('Erreur lors de la cr√©ation du menu de s√©lection. Contactez un administrateur.');
	}
}

// Exporter le module avec toutes les fonctions n√©cessaires pour la gestion des menus
module.exports.publishSelectionMenu = publishSelectionMenu;
module.exports.generateRoleOptions = generateRoleOptions;
module.exports.createRoleSelectionMenu = createRoleSelectionMenu;